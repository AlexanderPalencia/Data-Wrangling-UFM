)
for(i in 1:length(Piloto)){
nombre <- Piloto[i];
CViajesAnuales <- as.character(nrow(filter(data, PILOTO == Piloto[i])))
vector <- c(nombre,CViajesAnuales)
print(vector)
}
}
"Pilotos"
DFPilotos()
t <- filter(data, UNIDAD == "Panel" )
"Panel"
sum(t$Q)
Por <- (sum(t$Q)*100)/IngresoTotal
a <- filter(data, UNIDAD == "Camion Pequeño" )
"Camion Pequeño"
sum(a$Q)
Por1 <- (sum(a$Q)*100)/IngresoTotal
s <- filter(data, UNIDAD == "Camion Grande" )
"Camion Grande"
sum(s$Q)
Por2 <- (sum(s$Q)*100)/IngresoTotal
CamionPeque <- filter(data, UNIDAD == "Camion Pequeño")
sprintf('Ingresos Camiones Pequeños %f', sum(CamionPeque$Q))
Panel <- filter(data, UNIDAD == "Panel")
sprintf('Ingresos Panel %f', sum(Panel$Q))
CamionGrande <- filter(data, UNIDAD == "Camion Grande")
sprintf('Ingresos Camiones Grandes %f', sum(CamionGrande$Q))
for(i in 1:length(Faltantes)){
faltantePanel <- filter(data, CLIENTE == Faltantes[i], UNIDAD == "Panel" )
}
for(i in 1:length(Faltantes)){
faltantesPeque <- filter(data, CLIENTE == Faltantes[i], UNIDAD == "Camion Pequeño" )
}
for(i in 1:length(Faltantes)){
faltantesGrande <- filter(data, CLIENTE == Faltantes[i], UNIDAD == "Camion Grande" )
}
sprintf('Cantidad de viajes faltantes con paneles %i', nrow(faltantePanel))
sprintf('Cantidad de viajes faltantes con camion pequeño %i', nrow(faltantesPeque))
sprintf('Cantidad de viajes faltantes con camiones grande %i', nrow(faltantesGrande))
sprintf('Cantidad de viajes faltantes con panel %f', sum(faltantePanel$Q))
sprintf('Cantidad de viajes faltantes con camiones pequeño %f', sum(faltantesPeque$Q))
sprintf('Cantidad de viajes faltantes con camiones grande %f', sum(faltantesGrande$Q))
sprintf('Cantidad de Producto en camiones paneles %f', sum(faltantePanel$CANTIDAD))
sprintf('Cantidad de Producto faltante en camiones pequeño %f', sum(faltantesPeque$Q))
sprintf('Cantidad de Producto faltante en camiones grandes %f', sum(faltantesPeque$Q))
CamionPeque <- filter(data, UNIDAD == "Camion Pequeño")
sprintf('Ingresos Camiones Pequeños %f', sum(CamionPeque$Q))
Panel <- filter(data, UNIDAD == "Panel")
sprintf('Ingresos Panel %f', sum(Panel$Q))
CamionGrande <- filter(data, UNIDAD == "Camion Grande")
sprintf('Ingresos Camiones Grandes %f', sum(CamionGrande$Q))
for(i in 1:length(Faltantes)){
faltantePanel <- filter(data, CLIENTE == Faltantes[i], UNIDAD == "Panel" )
}
for(i in 1:length(Faltantes)){
faltantesPeque <- filter(data, CLIENTE == Faltantes[i], UNIDAD == "Camion Pequeño" )
}
for(i in 1:length(Faltantes)){
faltantesGrande <- filter(data, CLIENTE == Faltantes[i], UNIDAD == "Camion Grande" )
}
sprintf('Cantidad de viajes faltantes con paneles %i', nrow(faltantePanel))
sprintf('Cantidad de viajes faltantes con camion pequeño %i', nrow(faltantesPeque))
sprintf('Cantidad de viajes faltantes con camiones grande %i', nrow(faltantesGrande))
sprintf('Cantidad de Producto en camiones paneles %f', sum(faltantePanel$CANTIDAD))
sprintf('Cantidad de Producto faltante en camiones pequeño %f', sum(faltantesPeque$Q))
sprintf('Cantidad de Producto faltante en camiones grandes %f', sum(faltantesPeque$Q))
CamionPeque <- filter(data, UNIDAD == "Camion Pequeño")
sprintf('Ingresos Camiones Pequeños %f', sum(CamionPeque$Q))
Panel <- filter(data, UNIDAD == "Panel")
sprintf('Ingresos Panel %f', sum(Panel$Q))
CamionGrande <- filter(data, UNIDAD == "Camion Grande")
sprintf('Ingresos Camiones Grandes %f', sum(CamionGrande$Q))
for(i in 1:length(Faltantes)){
faltantePanel <- filter(data, CLIENTE == Faltantes[i], UNIDAD == "Panel" )
}
for(i in 1:length(Faltantes)){
faltantesPeque <- filter(data, CLIENTE == Faltantes[i], UNIDAD == "Camion Pequeño" )
}
for(i in 1:length(Faltantes)){
faltantesGrande <- filter(data, CLIENTE == Faltantes[i], UNIDAD == "Camion Grande" )
}
sprintf('Cantidad de viajes faltantes con paneles %i', nrow(faltantePanel))
sprintf('Cantidad de viajes faltantes con camion pequeño %i', nrow(faltantesPeque))
sprintf('Cantidad de viajes faltantes con camiones grande %i', nrow(faltantesGrande))
sprintf('Cantidad de Producto en camiones paneles %f', sum(faltantePanel$CANTIDAD))
sprintf('Cantidad de Producto faltante en camiones pequeño %f', sum(faltantesPeque$CANTIDAD))
sprintf('Cantidad de Producto faltante en camiones grandes %f', sum(faltantesGrande$CANTIDAD))
getwd()
setwd(./../)
setwd(../)
setwd("D:\Documents\Data-Product\Parcial1")
setwd("D:/Documents/Data-Product/Parcial1")
getwd()
stats <- read.csv('data/academatica_video_stats.csv')
metadata <- read.csv('data/new_metadata.csv')
videos <- read.csv('data/new_videos.csv')
head(stats)
# Videos con mas likes
mostView <- max(stats$likeCount)
mostView
# Cantidad de videos
nrow(videos)
nrow(stats)
nrow(stats)
# Cantidad de videos
nrow(videos)
nrow(metadata)
nrow(metadata)
nrow(stats)
cls
nrow(videos)
nrow(metadata)
nrow(stats)
# Videos con mas likes
stats %>% arrange(likeCount)
library(tidyverse)
# Videos con mas likes
stats %>% arrange(likeCount)
ordenByLikes <-
stats %>% arrange(likeCount)
head(ordenByLikes)
# Videos con mas likes
ordenByLikes <-
stats %>% arrange(desc(likeCount))
head(ordenByLikes)
favoriteVideos <-
stats %>% unique(stats$favoriteCount)
favoriteVideos <-
stats %>% unique(favoriteCount)
favoriteVideos <- unique(stats$favoriteCount)
favoriteVideos
head(stats)
# Videos mas comentados
ordenByComments <-
stats %>% arrange(desc(commentCount))
head(ordenByComments)
head(metadata)
head(videos)
unique(videos$kind)
length(unique(etag))
length(unique(videos$etag))
length(unique(videos$contentDetails.videoId))
groupByDate <- videos %>% group_by(date)
groupByDate
n_groups(groupByDate)
group_size(groupByDate)
# Understanding data video
unique(videos$date)
length(unique(videos$date))
videosDate %>% summarise(nrow())
videosDate <- videos %>% group_by(date)
videosDate %>% summarise(nrow())
videosDate %>% summarise(count())
videosDate %>% summarise(count(n))
mt_mean <- videos %>%
group_by(date) %>%
summarise(avg_count = n())
mt_mean
# Group By date
videosDate <- videos %>% group_by(date)
n_groups(videosDate)
videosDate %>% summarise(avg_count = n())
daysCount <- videosDate %>% summarise(avg_count = n())
daysCount <-
videosDate %>%
summarise(avg_count = n()) %>%
arrange(desc(avg_count))
daysCount
require(lubridate)
install.packages(lubridate)
install.packages("lubridate")
install.packages("lubridate")
install.packages("lubridate")
library(tidyverse)
library(lubridate, warn.conflicts = FALSE)
daysCount <-
videosDate %>%
summarise(avg_count = n()) %>% arrange(desc(avg_count))
daysCount
years <- year(as.Date(videos$date, "%y-%b-%d"))
year()
years
ymd(videos$date)
year(ymd(videos$date))
videosYear <- year(ymd(videos$date))
videosYear
videosYear <- year(ymd(videos$date))
videos$yearPublish <- videosYear
head(videos)
videosMonth <- month(ymd(videos$date))
videosDay <- day(ymd(videos$date))
videosDay
yearGroupVideos <- videos %>% group_by(yearPublish)
yearGroupVideos <- videos %>% group_by(yearPublish)
n_groups(yearGroupVideos)
yearGroupVideos
unique(videos$yearPublish)
lenght(unique(videos$yearPublish))
length(unique(videos$yearPublish))
yearGroupVideos1 <- videos %>% group_by(id)
n_groups(yearGroupVideos1)
yearGroupVideos <- videos %>% group_by(yearPublish)
cls
# Group By date
videosDate <- videos %>% group_by(date)
n_groups(videosDate)
#
daysCount <-
videosDate %>%
summarise(avg_count = n()) %>% arrange(desc(avg_count))
daysCount
# Stats by YEAR
yearGroupVideos <- videos %>% group_by(yearPublish)
length(unique(videos$yearPublish))
# Count videos publish by year
daysCount <-
yearGroupVideos %>%
summarise(avg_count = n()) %>% arrange(desc(avg_count))
# Count videos publish by year
videosByYear <-
yearGroupVideos %>%
summarise(avg_count = n()) %>% arrange(desc(avg_count))
videosByYear
# Stats by month
monthGroupVideos <- videos %>% group_by(monthPublish)
# Count videos publish by month
videosByMonth <-
monthGroupVideos %>%
summarise(avg_count = n()) %>% arrange(desc(avg_count))
# Getting year,month and day
videosYear <- year(ymd(videos$date))
videosMonth <- month(ymd(videos$date))
videosDay <- day(ymd(videos$date))
# Adding to dataframe
videos$yearPublish <- videosYear
videos$monthPublish <- videosMonth
videos$dayPublish <- videosDay
monthGroupVideos <- videos %>% group_by(monthPublish)
# Count videos publish by month
videosByMonth <-
monthGroupVideos %>%
summarise(avg_count = n()) %>% arrange(desc(avg_count))
videosByMonth
# Stats by month
yearMonthGroupVideos <- videos %>% group_by(yearPublish, monthPublish)
# Count videos publish by month
videosByYearMonth <-
yearMonthGroupVideos %>%
summarise(avg_count = n()) %>% arrange(desc(avg_count))
videosByYearMonth
filter(videos, yearPublish = 2012)
filter(videos, yearPublish == 2012)
videosByYearMonth
year2012 <- videosByYearMonth %>% filter(yearPublish == 2012)
year2012
unlink('flex_cache', recursive = TRUE)
library(flexdashboard)
library(readr)
library(dplyr)
library(DT)
library(tidyverse, warn.conflicts = FALSE)
library(lubridate, warn.conflicts = FALSE)
# Videos con mas views
ordenByViews <-
stats %>% arrange(desc(viewCount))
ordenByViews[id,1]
ordenByViews$id[,1]
ordenByViews$id[1]
videos
head(metadata)
union <- merge(stats, videos)
union <- merge(stats, videos, all = TRUE, by = "id")
stats <- read.csv('data/academatica_video_stats.csv')
metadata <- read.csv('data/new_metadata.csv')
videos <- read.csv('data/new_videos.csv')
union <- merge(stats, videos, all = TRUE, by = "id")
head()
union <- merge(stats, videos, all = TRUE, by = "id")
union
union <- merge(stats, metadata, all = TRUE, by = "id")
stats <- read.csv('data/academatica_video_stats.csv')
metadata <- read.csv('data/new_metadata.csv')
videos <- read.csv('data/new_videos.csv')
metadata <- metadata %>%
rename(id = video_id)
union <- merge(stats, metadata, all = TRUE, by = "id")
head(union)
head(videos)
df = subset(videos, select = -c(contentDetails.videoId, date))
head(df)
df = subset(videos, select = c(contentDetails.videoId, date))
head(df)
df = subset(videos, select = c(contentDetails.videoId, date)) %>%
rename(id = contentDetails.videoId)
head(df)
df = subset(videos, select = c(contentDetails.videoId, date)) %>%
rename(id = contentDetails.videoId) %>%
arrange(id)
head(df)
union <- merge(stats, metadata, all = TRUE, by = "id") %>%
arrange(id)
head(union)
finalTable <- merge(union, df, all = TRUE, by = "id")
head(finalTable)
head(finalTable)
stats <- read.csv('data/academatica_video_stats.csv')
metadata <- read.csv('data/new_metadata.csv')
videos <- read.csv('data/new_videos.csv')
metadata <- metadata %>%
rename(id = video_id)
union <- merge(stats, metadata, all = TRUE, by = "id") %>%
arrange(id)
df = subset(videos, select = c(contentDetails.videoId, date)) %>%
rename(id = contentDetails.videoId) %>%
arrange(id)
finalTable <- merge(union, df, all = TRUE, by = "id")
finalTable <- na.omit(finalTable)
head(finalTable)
head(finalTable)
nrow(finalTable)
stats <- read.csv('data/academatica_video_stats.csv')
metadata <- read.csv('data/new_metadata.csv')
videos <- read.csv('data/new_videos.csv')
metadata <- metadata %>%
rename(id = video_id)
union <- merge(stats, metadata, all = TRUE, by = "id") %>%
arrange(id)
df = subset(videos, select = c(contentDetails.videoId, date)) %>%
rename(id = contentDetails.videoId) %>%
arrange(id)
finalTable <- merge(union, df, all = TRUE, by = "id")
finalTable <- na.omit(finalTable)
videosYear <- year(ymd(finalTable$date))
videosMonth <- month(ymd(finalTable$date))
videosDay <- day(ymd(finalTable$date))
# Adding to dataframe
finalTable$yearPublish <- videosYear
finalTable$monthPublish <- videosMonth
finalTable$dayPublish <- videosDay
videosYear <- year(ymd(finalTable$date))
videosByYear
head(finalTable)
ordenByViews <-
finalTable %>% arrange(desc(viewCount))
ordenByViews <-
finalTable %>% arrange(desc(viewCount))
valueBox(ordenByViews$title[1],
caption = "Video mas visto",
icon = 'fa-database')
head(ordenByViews )
stats <- read.csv('data/academatica_video_stats.csv')
metadata <- read.csv('data/new_metadata.csv')
videos <- read.csv('data/new_videos.csv')
metadata <- metadata %>%
rename(id = video_id)
union <- merge(stats, metadata, all = TRUE, by = "id") %>%
arrange(id)
df = subset(videos, select = c(contentDetails.videoId, date)) %>%
rename(id = contentDetails.videoId) %>%
arrange(id)
finalTable <- merge(union, df, all = TRUE, by = "id")
finalTable <- na.omit(finalTable)
videosYear <- year(ymd(finalTable$date))
videosMonth <- month(ymd(finalTable$date))
videosDay <- day(ymd(finalTable$date))
finalTable$yearPublish <- videosYear
finalTable$monthPublish <- videosMonth
finalTable$dayPublish <- videosDay
ordenByViews <-
finalTable %>% arrange(desc(viewCount))
valueBox(ordenByViews$title[1],
caption = "Video mas visto",
icon = 'fa-database')
head(ordenByViews)
str_c("Video mas visto %s", ordenByViews$viewCount[1])
str_c("Video mas visto %s", ordenByViews$viewCount[1])
str_c("Video mas visto: ", ordenByViews$viewCount[1])
ordenByViews <-
stats %>% arrange(desc(viewCount)) %>%
DT::datatable()
ordenByViews <-
stats %>% arrange(desc(viewCount)) %>%
DT::datatable()
ordenByViews
ordenByViews
ordenByViews <-
finalTable %>% arrange(desc(viewCount)) %>%
DT::datatable()
library(flexdashboard)
library(readr)
library(dplyr)
library(DT)
library(tidyverse, warn.conflicts = FALSE)
library(lubridate, warn.conflicts = FALSE)
library(dygraphs)
install.packages("library(dygraphs)")
library(flexdashboard)
library(readr)
library(dplyr)
library(DT)
library(tidyverse, warn.conflicts = FALSE)
library(lubridate, warn.conflicts = FALSE)
library(plotly)
install.packages("plotly")
finalTable$title[0,5]
finalTable$title[,5]
finalTable$title[5]
finalTable$title[:5]
finalTable$title[1:5]
library(flexdashboard)
library(readr)
library(dplyr)
library(DT)
library(tidyverse, warn.conflicts = FALSE)
library(lubridate, warn.conflicts = FALSE)
library(plotly)
library(ggplot2)
x <- ggplot(finalTable, aes(x = yearPublish, y = likesCount)) + geom_abline(aes(intercept=0, slope=1))
x <- ggplot(finalTable, aes(x = yearPublish, y = likesCount)) + geom_boxplot()
x <- ggplot(finalTable, aes(x = yearPublish, y = likeCount)) + geom_point()
x
x <- ggplot(finalTable, aes(x = yearPublish, y = likeCount)) + geom_jitter()
x
x <- ggplot(finalTable, aes(x = yearPublish, y = likeCount, colors = yearPublish)) + geom_jitter()
x
x <- ggplot(finalTable, aes(x = yearPublish, y = likeCount, color = yearPublish)) + geom_jitter()
x
head(finalTable)
p<-ggplot(finalTable, aes(x=dislikeCount , y=likeCount, group=supp)) +
geom_line(aes(color=supp))+
geom_point(aes(color=supp))
p
p<-ggplot(finalTable, aes(x=dislikeCount , y=likeCount, group=yearPublish)) +
geom_line(aes(color=supp))+
geom_point(aes(color=supp))
p
p<-ggplot(finalTable, aes(x=dislikeCount , y=likeCount, group=yearPublish)) +
geom_line(aes(color=yearPublish))+
geom_point(aes(color=yearPublish))
p
bp<- ggplot(finalTable, aes(x=likeCount, y=dislikeCount , fill=yearPublish))+
geom_bar(width = 1, stat = "identity")
bp
bp<- ggplot(finalTable, aes(x=sum(likeCount), y=sum(dislikeCount) , fill=yearPublish))+
geom_bar(width = 1, stat = "identity")
bp
bp<- ggplot(finalTable, aes(x=sum(likeCount), y=sum(dislikeCount)))+
geom_bar(width = 1, stat = "identity")
bp
bp<- ggplot(finalTable, aes(x=59, y=562))+
geom_bar(width = 1, stat = "identity")
bp
bp<- ggplot(finalTable, aes(x=59, y=56))+
geom_bar(width = 1, stat = "identity")
bp
slices <- c(sum(finalTable$likeCount), sum(finalTable$dislikeCount))
lbls <- c("Likes", "Dislikes")
pie(slices, labels = lbls, main="Pie Chart of Countries")
slices <- c(sum(finalTable$likeCount), sum(finalTable$dislikeCount))
lbls <- c("Likes", "Dislikes")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=rainbow(length(lbls)),
main="Pie Chart of Countries")
slices <- c(sum(finalTable$likeCount), sum(finalTable$dislikeCount))
lbls <- c("Likes", "Dislikes")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=blues9(length(lbls)),
main="Likes vs Dislikes")
slices <- c(sum(finalTable$likeCount), sum(finalTable$dislikeCount))
lbls <- c("Likes", "Dislikes")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=blues(length(lbls)),
main="Likes vs Dislikes")
slices <- c(sum(finalTable$likeCount), sum(finalTable$dislikeCount))
lbls <- c("Likes", "Dislikes")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, col=blue(length(lbls)),
main="Likes vs Dislikes")
slices <- c(sum(finalTable$likeCount), sum(finalTable$dislikeCount))
lbls <- c("Likes", "Dislikes")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls),
slices <- c(sum(finalTable$likeCount), sum(finalTable$dislikeCount))
lbls <- c("Likes", "Dislikes")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls)
main="Likes vs Dislikes")
slices <- c(sum(finalTable$likeCount), sum(finalTable$dislikeCount))
lbls <- c("Likes", "Dislikes")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls),
slices <- c(sum(finalTable$likeCount), sum(finalTable$dislikeCount))
lbls <- c("Likes", "Dislikes")
pct <- round(slices/sum(slices)*100)
lbls <- paste(lbls, pct) # add percents to labels
lbls <- paste(lbls,"%",sep="") # ad % to labels
pie(slices,labels = lbls, main="Likes vs Dislikes")
